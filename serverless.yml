# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: 90srehem
# "service" is the name of this project. This will also be added to your AWS resource names.
service: middy-framework

plugins:
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  defaults:
    stage: dev
    region: sa-east-1
    bucketName:
      dev: ${env:PROFILE_PICTURE_BUCKET}
      default: !Ref ProfilePicturesBucket

provider:
  name: aws
  runtime: nodejs20.x
  architecture: arm64
  region: sa-east-1
  stage: ${opt:stage, self:custom.defaults.stage}
  timeout: 10
  memorySize: 128
  httpApi:
    cors:
      allowedOrigins:
        - "*"
      allowedHeaders:
        - "*"
      allowedMethods:
        - GET
        - POST
        - PUT
        - OPTIONS
      allowCredentials: false
  environment:
    STAGE_NAME: ${env:STAGE_NAME, 'development'}
    PROFILE_PICTURE_BUCKET: ${self:service}-${self:provider.stage}-profile-pictures
    PROFILE_PICTURE_TABLE: !Ref ProfilePicturesTable
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:PutObject"
            - "s3:ListBucket"
            - "S3:GetObject"
            - "s3:PutObjectTagging"

          Resource:
            - !GetAtt ProfilePicturesBucket.Arn
            - !Join ["", [!GetAtt ProfilePicturesBucket.Arn, "/*"]]
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:Scan
            - dynamodb:UpdateItem
          Resource:
            - !GetAtt ProfilePicturesTable.Arn # short syntax
            - !Join ["/", [!GetAtt ProfilePicturesTable.Arn, "index", "*"]]

package:
  individually: true

build:
  esbuild:
    bundle: true
    minify: true
    sourcemap: false
    exclude:
      - "@aws-sdk/*"
    external:
      - "@aws-sdk/*"

functions:
  # preflight:
  #   handler: src/main/functions/upload.handler
  #   events:
  #     - httpApi:
  #         path: /upload
  #         method: OPTIONS
  #     - httpApi:
  #         path: /upload/{param+}
  #         method: OPTIONS
  file-upload-trigger:
    handler: src/main/functions/file-upload-trigger.handler
    events:
      - s3:
          bucket: ${self:service}-${self:provider.stage}-profile-pictures
          event: s3:ObjectCreated:*
          existing: true

  upload:
    handler: src/main/functions/upload.handler
    events:
      - httpApi:
          path: /upload
          method: ANY
      - httpApi:
          path: /upload/{param+}
          method: ANY
  users:
    handler: src/main/functions/users.handler
    events:
      - httpApi:
          path: /users
          method: ANY
      - httpApi:
          path: /users/{param+}
          method: ANY

resources:
  Resources:
    ProfilePicturesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-profile-pictures
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
              MaxAge: 3000
    ProfilePicturesTable: # logical name - nome do template dentro do cloudformation
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-ProfilePicturesTable
        BillingMode: PAY_PER_REQUEST
        # DeletionProtectionEnabled: true # <- marcar para amanter os dados da tabela
        AttributeDefinitions:
          - AttributeName: fileKey
            AttributeType: S
        KeySchema:
          - AttributeName: fileKey
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: true
